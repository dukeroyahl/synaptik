name: CI

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Smart concurrency - cancel for PRs, don't cancel for main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true'

jobs:
  # Determine what type of checks to run
  workflow-context:
    runs-on: ubuntu-latest
    outputs:
      check_type: ${{ steps.context.outputs.check_type }}
      environment: ${{ steps.context.outputs.environment }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      backend_changed: ${{ steps.changes.outputs.backend }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
              - '*.json'
              - 'package*.json'
            backend:
              - 'server/**'
              - 'mcp/**'
              - '*.gradle*'
              - 'gradle/**'

      - name: Determine workflow context
        id: context
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "check_type=fast" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "check_type=standard" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          fi

  # Fast checks for PRs - optimized for speed
  fast-validation:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - check: frontend-lint
            component: frontend
          - check: backend-compile  
            component: backend
          - check: security-basic
            component: security
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for frontend
        if: matrix.check == 'frontend-lint' && needs.workflow-context.outputs.frontend_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Setup Java and Gradle for backend
        if: matrix.check == 'backend-compile' && needs.workflow-context.outputs.backend_changed == 'true'
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        if: matrix.check == 'backend-compile' && needs.workflow-context.outputs.backend_changed == 'true'
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: Frontend fast lint
        if: matrix.check == 'frontend-lint' && needs.workflow-context.outputs.frontend_changed == 'true'
        run: |
          cd client
          npm ci --prefer-offline --no-audit
          npm run lint -- --max-warnings 0
          npm run type-check

      - name: Backend fast compile
        if: matrix.check == 'backend-compile' && needs.workflow-context.outputs.backend_changed == 'true'
        run: |
          cd server
          gradle compileJava compileTestJava

      - name: Basic security scan
        if: matrix.check == 'security-basic'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # Comprehensive CI for main branch and manual triggers
  comprehensive-ci:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type != 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
      fail-fast: false
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.component == 'frontend' && needs.workflow-context.outputs.frontend_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Setup JDK with Gradle caching
        if: matrix.component == 'backend' && needs.workflow-context.outputs.backend_changed == 'true'
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Gradle
        if: matrix.component == 'backend' && needs.workflow-context.outputs.backend_changed == 'true'
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          cache-cleanup: on-success

      - name: Frontend build and test
        if: matrix.component == 'frontend' && needs.workflow-context.outputs.frontend_changed == 'true'
        run: |
          cd client
          npm ci --prefer-offline
          
          # Run all frontend tasks in optimal order
          npm run lint
          npm run type-check
          npm test -- --coverage --passWithNoTests --watchAll=false
          npm run build
          
          # Bundle size analysis
          echo "üì¶ Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ | tee -a $GITHUB_STEP_SUMMARY || echo "No dist directory" >> $GITHUB_STEP_SUMMARY
          echo "Top 5 largest JS files:" >> $GITHUB_STEP_SUMMARY
          find dist/ -name "*.js" -exec du -h {} + | sort -hr | head -5 | tee -a $GITHUB_STEP_SUMMARY || echo "No JS files found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Backend build and test
        if: matrix.component == 'backend' && needs.workflow-context.outputs.backend_changed == 'true'
        run: |
          cd server
          
          # Single Gradle command for maximum efficiency - using Quarkus JaCoCo
          gradle clean test build
          
          # Generate test report summary
          echo "üìä Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "build/test-results/test/TEST-*.xml" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            find build/test-results/test -name "TEST-*.xml" -exec grep -h "testsuite" {} \; | head -5 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show JaCoCo coverage info if available
          if [ -f "build/jacoco/jacoco.exec" ]; then
            echo "üìä Code Coverage Generated: build/jacoco/jacoco.exec" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component }}
          path: |
            client/coverage/
            server/build/reports/
            mcp/build/reports/
          retention-days: 3

      - name: Generate build summary
        if: always()
        run: |
          echo "## üöÄ CI Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Component**: ${{ matrix.component }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Strategy**: Build + Test Combined" >> $GITHUB_STEP_SUMMARY
          echo "- **Gradle Caching**: ‚úÖ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Build**: ‚úÖ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Cache**: ‚úÖ Enabled" >> $GITHUB_STEP_SUMMARY

    # Security and quality checks  
  security-comprehensive:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'comprehensive'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run dependency audit
        run: |
          # Frontend dependency audit
          if [ -f "client/package.json" ]; then
            cd client
            npm audit --audit-level high || echo "‚ö†Ô∏è Frontend dependencies have vulnerabilities"
            cd ..
          fi
          
          # Backend dependency check would go here if using tools like OWASP dependency check



  # Status reporting
  ci-summary:
    needs: [workflow-context, fast-validation, comprehensive-ci, security-comprehensive]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** ${{ needs.workflow-context.outputs.check_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.workflow-context.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Changed:** ${{ needs.workflow-context.outputs.frontend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Changed:** ${{ needs.workflow-context.outputs.backend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            echo "| Fast Validation | ${{ needs.fast-validation.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Comprehensive CI | ${{ needs.comprehensive-ci.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | ${{ needs.security-comprehensive.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check critical failures
        run: |
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            if [ "${{ needs.fast-validation.result }}" != "success" ]; then
              echo "‚ùå Fast validation failed"
              exit 1
            fi
          else
            if [ "${{ needs.comprehensive-ci.result }}" != "success" ]; then
              echo "‚ùå Comprehensive CI failed"
              exit 1
            fi
          fi
          echo "‚úÖ All checks passed"
